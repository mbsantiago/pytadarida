"""Test the parser module."""
import os

import pandas as pd
import pytest

from pytadarida.parsing import parse_ta_file

BASE_DIR = os.path.dirname(os.path.abspath(__file__))

TEST_FILE_VERSION1 = os.path.join(
    BASE_DIR,
    "data",
    "ta_file_version_1.ta",
)

TEST_FILE_VERSION2 = os.path.join(
    BASE_DIR,
    "data",
    "ta_file_version_2.ta",
)


VERSION1_COLUMNS = [
    "Filename",
    "CallNum",
    "Version",
    "FileDur",
    "SampleRate",
    "StTime",
    "Dur",
    "PrevSt",
    "Fmax",
    "Fmin",
    "BW",
    "FreqMP",
    "PosMP",
    "FreqPkS",
    "FreqPkM",
    "PosPkS",
    "PosPkM",
    "FreqPkS2",
    "FreqPkM2",
    "PrevMP1",
    "PrevMP2",
    "NextMP1",
    "NextMP2",
    "Amp1",
    "Amp2",
    "Amp3",
    "Amp4",
    "NoisePrev",
    "NoiseNext",
    "NoiseDown",
    "NoiseUp",
    "CVAmp",
    "CO_Dur",
    "CO2_Dur",
    "CM_Fmax",
    "CS_Fmax",
    "CM_Fmin",
    "CN_Fmin",
    "CM_BW",
    "CS_BW",
    "CN_BW",
    "CO2_FPk",
    "CO2_FPkD",
    "CO2_TPk",
    "CM_Slope",
    "CS_Slope",
    "CN_Slope",
    "CO_Slope",
    "CO2_Slope",
    "CO_ISlope",
    "CO2_ISlope",
    "CM_HCF",
    "CS_HCF",
    "CN_HCF",
    "CO_HCF",
    "CO2_HCF",
    "CM_THCF",
    "CS_THCF",
    "CN_THCF",
    "CO_THCF",
    "CO2_THCF",
    "CM_FIF",
    "CS_FIF",
    "CN_FIF",
    "CO_FIF",
    "CO2_FIF",
    "CM_LCF",
    "CS_LCF",
    "CN_LCF",
    "CO_LCF",
    "CO2_LCF",
    "CM_UpSl",
    "CS_UpSl",
    "CN_UpSl",
    "CO_UpSl",
    "CO2_UpSl",
    "CM_LoSl",
    "CS_LoSl",
    "CN_LoSl",
    "CO_LoSl",
    "CO2_LoSl",
    "CM_StF",
    "CM_EnF",
    "CM_StSl",
    "CS_StSl",
    "CN_StSl",
    "CO_StSl",
    "CO2_StSl",
    "CM_EnSl",
    "CS_EnSl",
    "CN_EnSl",
    "CO_EnSl",
    "CO2_EnSl",
    "CM_FPSl",
    "CS_FPSl",
    "CN_FPSl",
    "CO_FPSl",
    "CO2_FPSl",
    "CM_FISl",
    "CO2_FISl",
    "CM_CeF",
    "CS_CeF",
    "CN_CeF",
    "CM_5dBBF",
    "CM_5dBAF",
    "CM_5dBBW",
    "CM_5dBDur",
    "CO2_5dBBF",
    "CO2_5dBAF",
    "CO2_5dBBW",
    "CO2_5dBDur",
    "Hup_RFMP",
    "Hup_PosMP",
    "Hup_PosSt",
    "Hup_PosEn",
    "Hup_AmpDif",
    "Hup_RSlope",
    "Hlo_RFMP",
    "Hlo_PosMP",
    "Hlo_PosSt",
    "Hlo_PosEn",
    "Hlo_AmpDif",
    "Hlo_RSlope",
    "Ramp_2_1",
    "Ramp_3_1",
    "Ramp_3_2",
    "Ramp_1_2",
    "Ramp_4_3",
    "Ramp_2_3",
    "RAN_2_1",
    "RAN_3_1",
    "RAN_3_2",
    "RAN_1_2",
    "RAN_4_3",
    "RAN_2_3",
    "HetX",
    "HetY",
    "Dbl8",
    "Stab",
    "HeiET",
    "HeiEM",
    "HeiRT",
    "HeiRM",
    "HeiETT",
    "HeiEMT",
    "HeiRTT",
    "HeiRMT",
    "MedInt",
    "Int25",
    "Int75",
    "RInt1",
    "IntDev",
    "SmIntDev",
    "LgIntDev",
    "VarInt",
    "VarSmInt",
    "VarLgInt",
    "RIntDev1",
    "EnStabSm",
    "EnStabLg",
    "HetXr",
    "HetYr",
    "HetYr2",
    "HetCMC",
    "HetCMD",
    "HetCTC",
    "HetCTD",
    "HetCMnP",
    "HetCMfP",
    "HetCTnP",
    "HetCTfP",
    "HetPicsMAD",
    "HetPicsMALD",
    "HetPicsMABD",
    "HetPicsMRLBD",
    "HetPicsTAD",
    "HetPicsTALD",
    "HetPicsTABD",
    "HetPicsTRLBD",
    "VDPicsM",
    "VLDPicsM",
    "VBDPicsM",
    "VDPPicsM",
    "VLDPPicsM",
    "VBDPPicsM",
    "VDPicsT",
    "VLDPicsT",
    "VBDPicsT",
    "VDPPicsT",
    "VLDPPicsT",
    "VBDPPicsT",
    "CM_SDC",
    "CM_SDCR",
    "CS_SDC",
    "CS_SDCR",
    "CN_SDC",
    "CN_SDCR",
    "CO_SDC",
    "CO_SDCR",
    "CO2_SDC",
    "CO2_SDCR",
    "CM_SDCRY",
    "CS_SDCRY",
    "CM_SDCRXY",
    "CS_SDCRXY",
    "CM_SDCL",
    "CM_SDCLR",
    "CM_SDCLRY",
    "CM_SDCLRXY",
    "CM_SDCLRXY2",
    "CM_SDCLOP",
    "CM_SDCLROP",
    "CM_SDCLRYOP",
    "CM_SDCLRXYOP",
    "CM_SDCLWB",
    "CM_SDCLRWB",
    "CM_SDCLRYWB",
    "CM_SDCLRXYWB",
    "CM_SDCLOPWB",
    "CM_SDCLROPWB",
    "CM_SDCLRYOPWB",
    "CM_SDCLRXYOPWB",
    "CM_SDCL_DNP",
    "CM_SDCLR_DNP",
    "CM_SDCLRY_DNP",
    "CM_SDCLRXY_DNP",
    "CM_SDCLRXY2_DNP",
    "CS_SDCL",
    "CS_SDCLR",
    "CS_SDCLRY",
    "CS_SDCLRXY",
    "CS_SDCLRXY2",
    "CS_SDCLOP",
    "CS_SDCLROP",
    "CS_SDCLRYOP",
    "CS_SDCLRXYOP",
    "CS_SDCLWB",
    "CS_SDCLRWB",
    "CS_SDCLRYWB",
    "CS_SDCLRXYWB",
    "CS_SDCLOPWB",
    "CS_SDCLROPWB",
    "CS_SDCLRYOPWB",
    "CS_SDCLRXYOPWB",
    "CS_SDCL_DNP",
    "CS_SDCLR_DNP",
    "CS_SDCLRY_DNP",
    "CS_SDCLRXY_DNP",
    "CS_SDCLRXY2_DNP",
    "CM_ELBPOS",
    "CS_ELBPOS",
    "CM_ELBSB",
    "CS_ELBSB",
    "CM_ELB2POS",
    "CS_ELB2POS",
    "CM_ELB2SB",
    "CS_ELB2SB",
    "CM_RAF",
    "CM_RAE",
    "CM_RAFE",
    "CM_RAFP",
    "CM_RAFP2",
    "CM_RAFP3",
    "CM_SBMP",
    "CM_SAMP",
    "CM_SBAR",
    "RAHP2",
    "RAHP4",
    "RAHP8",
    "RAHP16",
    "RAHE2",
    "RAHE4",
    "RAHE8",
    "RAHE16",
]

VERSION2_COLUMNS = [
    "Filename",
    "CallNum",
    "Version",
    "FileDur",
    "SampleRate",
    "StTime",
    "Dur",
    "PrevSt",
    "Fmin",
    "BW",
    "PosMP",
    "PrevMP1",
    "PrevMP2",
    "NextMP1",
    "NextMP2",
    "Amp1",
    "Amp2",
    "Amp3",
    "Amp4",
    "NoisePrev",
    "NoiseNext",
    "NoiseDown",
    "NoiseUp",
    "CVAmp",
    "CO2_FPkD",
    "CO2_TPk",
    "CM_Slope",
    "CS_Slope",
    "CN_Slope",
    "CO_Slope",
    "CO2_Slope",
    "CO2_ISlope",
    "CM_THCF",
    "CS_THCF",
    "CN_THCF",
    "CO_THCF",
    "CO2_THCF",
    "CM_FIF",
    "CS_FIF",
    "CN_FIF",
    "CM_UpSl",
    "CS_UpSl",
    "CN_UpSl",
    "CO_UpSl",
    "CO2_UpSl",
    "CM_LoSl",
    "CS_LoSl",
    "CN_LoSl",
    "CO_LoSl",
    "CO2_LoSl",
    "CM_StSl",
    "CS_StSl",
    "CN_StSl",
    "CO_StSl",
    "CO2_StSl",
    "CM_EnSl",
    "CS_EnSl",
    "CN_EnSl",
    "CO_EnSl",
    "CO2_EnSl",
    "CS_FPSl",
    "CN_FPSl",
    "CO_FPSl",
    "CM_FISl",
    "CO2_FISl",
    "CM_5dBBW",
    "CM_5dBDur",
    "CO2_5dBBW",
    "CO2_5dBDur",
    "Hup_RFMP",
    "Hup_AmpDif",
    "Hlo_PosEn",
    "Hlo_AmpDif",
    "Ramp_2_1",
    "Ramp_3_1",
    "Ramp_3_2",
    "Ramp_1_2",
    "Ramp_2_3",
    "RAN_2_1",
    "RAN_3_1",
    "RAN_3_2",
    "RAN_1_2",
    "RAN_4_3",
    "RAN_2_3",
    "HetX",
    "Dbl8",
    "Stab",
    "HeiET",
    "HeiEM",
    "HeiRT",
    "HeiRM",
    "HeiEMT",
    "HeiRTT",
    "HeiRMT",
    "Int25",
    "Int75",
    "RInt1",
    "SmIntDev",
    "LgIntDev",
    "VarInt",
    "VarSmInt",
    "VarLgInt",
    "RIntDev1",
    "EnStabSm",
    "EnStabLg",
    "HetYr",
    "HetCMC",
    "HetCMD",
    "HetCTC",
    "HetCTD",
    "HetCMfP",
    "HetCTfP",
    "HetPicsMALD",
    "HetPicsMABD",
    "HetPicsMRLBD",
    "HetPicsTABD",
    "HetPicsTRLBD",
    "VLDPPicsM",
    "VBDPPicsM",
    "VLDPPicsT",
    "VBDPPicsT",
    "CM_SDCR",
    "CS_SDCR",
    "CN_SDCR",
    "CO_SDCR",
    "CO2_SDCR",
    "CM_SDCRXY",
    "CS_SDCRXY",
    "CM_SDCL",
    "CM_SDCLOP",
    "CM_SDCLROP",
    "CM_SDCLRWB",
    "CM_SDCLRXYOPWB",
    "CM_SDCLR_DNP",
    "CS_SDCLOP",
    "CS_SDCLROP",
    "CS_SDCLRYOP",
    "CS_SDCLWB",
    "CS_SDCLR_DNP",
    "CS_SDCLRY_DNP",
    "CM_ELBPOS",
    "CS_ELBPOS",
    "CM_ELBSB",
    "CS_ELBSB",
    "CM_ELB2POS",
    "CS_ELB2POS",
    "CM_ELB2SB",
    "CS_ELB2SB",
    "CM_RAFE",
    "CM_RAFP3",
    "CM_SBMP",
    "CM_SAMP",
    "CM_SBAR",
    "RAHE4",
]


def test_parse_ta_file_version_1():
    """Test parsing a .ta file with version 1."""
    dataframe = parse_ta_file(TEST_FILE_VERSION1)

    # Check that it is a pandas DataFrame
    assert isinstance(dataframe, pd.DataFrame)

    # Check that the shape is correct
    # (3 rows, 274 columns)
    assert dataframe.shape == (3, 274)

    # Check that column names are correct
    assert list(dataframe.columns) == VERSION1_COLUMNS


def test_parse_ta_file_version_2():
    """Test parsing a .ta file with version 2."""
    dataframe = parse_ta_file(TEST_FILE_VERSION2)

    # Check that it is a pandas DataFrame
    assert isinstance(dataframe, pd.DataFrame)

    # Check that the shape is correct
    # (3 rows, 154 columns)
    assert dataframe.shape == (3, 154)

    # Check that column names are correct
    assert list(dataframe.columns) == VERSION2_COLUMNS


def test_parse_ta_file_raises_if_file_not_found():
    """Test that a FileNotFoundError is raised if the file is not found."""
    with pytest.raises(FileNotFoundError):
        parse_ta_file("non_existing_file.ta")


def test_parse_ta_files_raises_if_not_ta_file():
    """Test that a ValueError is raised if the file is not a .ta file."""
    # Make sure non ta file exists
    # (otherwise the FileNotFoundError will be raised)
    with open("non_ta_file.txt", "w", encoding="utf-8") as file:
        file.write("")

    with pytest.raises(ValueError):
        parse_ta_file("non_ta_file.txt")

    # Remove the file
    os.remove("non_ta_file.txt")
